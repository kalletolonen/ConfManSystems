# **h1 Hei maailma & monet tilat  / Hello World and states**

I started @ 13.40.
  
The source for the exercise  [Tero Karvinen](https://terokarvinen.com/2021/configuration-management-systems-2022-spring/#h1-hei-maailma--monet-tilat)
  
**Hardware & Software**  
*Win 11 + VirtualBox 6.0 + Debian 11 Bullseye*  
  
*Hardware:*  
*CPU: AMD Ryzen 9 5900HS*  
*Mem: 16 Gt LPDDR4X*  
*Storage: 512 Gt M.2 2230 NVMe PCIe 3.0 SSD*  
  
##  z) Lue ja tiivistä / Reading exercise ##

**[Salt Run Command Locally](https://terokarvinen.com/2021/salt-run-command-locally/)**  
  
Salt can by used locally, as well as to maintain a large number of slave computers. Local use is usefull for trying out things before implementing them to production systems.

The article teaches you how to install and use the most important functionality of Salt locally:  
	0. Pkg - is for managing that packages are installed  
	1. File - is for managing that a file exists  
	2. Service - is for managing processes (daemons)  
	3. User - is for managing users  
	4. Cmd - is for executing commands (THIS IS NOT IDEMPOTENT BY DEFAULT!)  
  
**[Salt Quickstart – Salt Stack Master and Slave on Ubuntu Linux](https://terokarvinen.com/2018/salt-quickstart-salt-stack-master-and-slave-on-ubuntu-linux/)**  
  
This article is about the building blocks for controlling a vast horde of computers.  
  
The main takeaways are:  
-What you should install for a slave (salt-minion)  
-What you should install for a master  (salt-master)  
-What actions are needed for the slave (edit the master's dns/ip in the minion's conf)  
-What actions are needed for the master (Accept the key from the slave)  
  
**[Vagrant Revisited – Install & Boot New Virtual Machine in 31 seconds](https://terokarvinen.com/2017/04/11/vagrant-revisited-install-boot-new-virtual-machine-in-31-seconds/)**  
  
A quick and painless article about initializing a virtual machine quick - something I just had to try out! The article has detailed instructions and commands to install and implement Vagrant & Virtualbox.  
  
My experiment didn't go as planned:  
  
````
E: Package 'virtualbox' has no installation candidate
````  
  
Seems to me, that there wasn't a virtualbox package to be had anymore, so I decided to try it out without it. That wasn't a huge success, since it was obviously missing some key components.  
  
````
kallet@debian:~$ vagrant init bento/ubuntu-16.04
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.

kallet@debian:~$ vagrant up
Bringing machine 'default' up with 'libvirt' provider...
Error while connecting to Libvirt: Error making a connection to libvirt URI qemu:///system?no_verify=1&keyfile=/home/kallet/.ssh/id_rsa:
Call to virConnectOpen failed: Failed to connect socket to '/var/run/libvirt/libvirt-sock': No such file or directory
````
  
The error said something about ssh, so I thought it might have been an issue, so I installed ssh:  
````sudo apt-get install -y ssh````  
  
That didn't solve my problem, so I was just left with the problem of not having a virtualbox-pkg installed. I followed a [tutorial](https://www.how2shout.com/linux/installing-virtualbox-app-on-debian-11-bullseye/) (parts 1-5) and managed to install virtualbox with that.  
  
I tried to initiate vagrant:  
````vagrant up````  
  
I got rewarded with an error.  
  
````
==> default: Clearing any previously set network interfaces...
==> default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==> default: Forwarding ports...
    default: 22 (guest) => 2222 (host) (adapter 1)
==> default: Booting VM...
There was an error while executing `VBoxManage`, a CLI used by Vagrant
for controlling VirtualBox. The command and stderr is shown below.

Command: ["startvm", "ca5dd2df-5ba6-405f-8b82-9fa0c926b91c", "--type", "headless"]

Stderr: VBoxManage: error: AMD-V is not available (VERR_SVM_NO_SVM)
VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component ConsoleWrap, interface IConsole
````

My guess is that the fact I was running a virtualization of Debian already might be complicating things, and the CPU wasn't available for the second virtulbox in a way that it would have liked to.  
  
**[Two Machine Virtual Network With Debian 11 Bullseye and Vagrant](https://terokarvinen.com/2021/two-machine-virtual-network-with-debian-11-bullseye-and-vagrant/)**  
  
The article explains how to do the installing and running of a virtualbox in vagrant. It starts with installation, continues to configuration and proceed to validation of the installation.  
  
I had to try this out too, since I didn't manage to do it on my own. This time it ended up with a different error msg.  
  
````
There was an error while executing `VBoxManage`, a CLI used by Vagrant
for controlling VirtualBox. The command and stderr is shown below.

Command: ["hostonlyif", "ipconfig", "vboxnet0", "--ip", "192.168.88.1", "--netmask", "255.255.255.0"]

Stderr: VBoxManage: error: Code E_ACCESSDENIED (0x80070005) - Access denied (extended info not available)
VBoxManage: error: Context: "EnableStaticIPConfig(Bstr(pszIp).raw(), Bstr(pszNetmask).raw())" at line 242 of file VBoxManageHostonly.cpp
````

So, I deduced that I might have messed up something by providing a new repo address and a new version of VirtualBox.  
  
I removed the source I had added to sources on the previous tutorial:  
````sudo rm /etc/apt/sources.list.d/virtualbox.list````  
  
I wasn't able to find a pkg to install from the Debian default repos:  
````sudo apt search virtualbox````  
  
So the article by Karvinen needs updating, as it's not possible to install and use vargant + virtualbox with the instructions it provides (on a Debian 11/Virtualbox 6.0-system). 
  
**[Command Line Basics Revisited](https://terokarvinen.com/2020/command-line-basics-revisited/)**
  
The article goes throught the basic Linux commands. Changing directories, manipulating files, ssh-connections, manual pages, using tab to minimize manual typing, the locations of everything important and installing software.

I took a break @ 14.51.  
  
Started again @ 15.42.  
  
## a) Mikä meininki? Selvitä, mikä käyttöjärjestelmä (Linuxin versio) sinulla on käytössä, ja mikä Saltin versio.  / Figure out Linux & Salt versions
  
So, this is how I figured out my Linux version and my salt version:  
	
	salt --version  
	cat /etc/os-release  
  

![Pic 1. Versions](pics/h1/1.png)  
*I had version 3002.6 of Salt and Debian 11*  
  
## b) Onko tietoa? Kerää jostain koneesta tiedot Saltilla, esimerkiksi käyttöjärjestelmä, vapaan muistin määrä, virtualisointi jne. Poimi tuloksesta olennaiset osat ja selitä ne. / Gather info with Salt 
  
First, I uninstalled salt-minion and salt-master to document the process from the beginning:  
	
	sudo apt-get remove salt-master  
	sudo apt-get remove salt-minion  
	  
Next, I installed install the same packages again:  
	sudo apt-get update  
	sudo apt-get install -y salt-master salt-minion  
  
After that it was time to check the ip of my master:  
	hostname -I
	
![Pic 2. Hostname](pics/h1/2.png)  
*The hostname*  
  
Now I had the hostname, so next I edited it to a minions conf-file:  
	sudo micro /etc/salt/minion  
  
![Pic 3. Conf-file](pics/h1/3.png)  
*The master's address was added*  
  
It was time to restart the minion, start the master.service and check for the key-situation:  
	sudo systemctl restart salt-minion  
	sudo systemctl start salt-master.service  
	sudo salt-key  
	
![Pic 4. Keyfob](pics/h1/4.png)  
*The key was already accepted, as I had forgotted to remove it.*  
  
I did some [Google-work](https://docs.saltproject.io/en/latest/ref/cli/salt-key.html), and figured out the command to delete the key:  
	sudo salt-key -d debian  
	
![Pic 5. Deleted key](pics/h1/5.png)  
*The key was deleted*  
  
Then I just restarted the minion, so that it would reach out for it's master:  
	sudo systemctl restart salt-minion
	sudo salt-key
	
![Pic 6. Restarted minion](pics/h1/6.png)  
*Back to the starting point*  
  
Accepting the key was done via:  
	sudo salt-key -A master  
	
I checked the status of my master-minion-arrangement:  
	sudo salt 'debian' test.ping
  
![Pic 7. Connecting people](pics/h1/7.png)  
*Connecting people, or minions*  
  
I checked the human users from my minion:  
	sudo salt 'debian' state.single cmd.run 'cut -d: -f1,3 /etc/passwd | egrep ':[0-9]{4}$' | cut -d: -f1'  

````
debian: #Name of the minion
----------
          ID: cut -d: -f1,3 /etc/passwd | egrep :[0-9]{4} | cut -d: -f1 #Command that was given
    Function: cmd.run #Function of salt(?) used to run the command
      Result: True #Returned a result
     Comment: Command "cut -d: -f1,3 /etc/passwd | egrep :[0-9]{4} | cut -d: -f1" run #Comment not present, since this is my custom execution
     Started: 16:26:32.118841 #Start time
    Duration: 6.526 ms #Duration of execution
     Changes:   
              ----------
              pid:
                  49492 #Process id for kernel (?)
              retcode:
                  0 #No idea about this one
              stderr: #Possible error messages for the command (?)
              stdout: #Output of the command(?)
                  nobody
                  kallet

Summary for debian #Summary for the minion in question
------------
Succeeded: 1 (changed=1) #Succeeded commands, changed regard to idempotency (ie. the state that was asked)
Failed:    0 #Failed commands
------------
Total states run:     1 #Number of states run
Total run time:   6.526 ms #Total run time (Obviously not measured from the time I gave the command)
````
	
I tried to better my understanding from [the documentation](https://docs.saltproject.io/salt/user-guide/en/latest/topics/states.html), but I wasn't able to figure out the things I didn't understand on the printout completely.  
  
Next I figured out my minions Linux version:  
	sudo salt 'debian' state.single cmd.run 'cat /etc/os-release'  

The print was similar, and thus told me that the printout is related to the type of command I ran. So, it was time to try out an idempotent pkg-command:  
	sudo salt 'debian' state.single pkg.installed apache2  
  
This command would have installed apache2-package, if it hadn't been already installed, thus checking for a state, ie. idempotency.  
  
````
kallet@debian:~$ sudo salt 'debian' state.single pkg.installed apache2
debian: #Name of the minion
----------
          ID: apache2 #id for the pkg
    Function: pkg.installed #function used for state
      Result: True #Result of the action
     Comment: All specified packages are already installed #As this is a "normal" command, comments are spesific
     Started: 16:42:37.531530 #Process start time
    Duration: 52.213 ms #Run time
     Changes:   #Changes that were made (none in this case)

Summary for debian
------------
Succeeded: 1 #The idempotency succeeded for this state (checked for pkg, pkg found)
Failed:    0
------------
Total states run:     1
Total run time:  52.213 ms
````
  
##c) Kultajyvät. Laadi komento, joka näyttää koneesta vain tärkeimmät tiedot (grains.item) / Get some grains
  
I executed the command:  
	sudo salt '\#*' grains.items  
	
![Pic 8. Grains](pics/h1/8.png)  
*The tail end of the printout*  
  
##d) d) Idempotenssi. Tee idempotentti esimerkkikomento saltilla. Aja komentoa useita kertoja. Osoita selitetyin esimerkein, että komentosi on idempotentti. / Prove idempotency
  
I kind of did this already on part b, but here's another example:  
	sudo salt 'debian' state.single pkg.removed apache2
	
The command removes apache2, if it is installed.  
  
````
debian:
----------
          ID: apache2
    Function: pkg.removed
      Result: True
     Comment: All targeted packages were removed. #Packages were removed
     Started: 17:04:35.199814
    Duration: 2793.233 ms
     Changes:   
              ----------
              apache2:
                  ----------
                  new:
                  old:
                      2.4.53-1~deb11u1

Summary for debian
------------
Succeeded: 1 (changed=1) #Command succeeded (=it executed) and it made 1 change (=removed apache2)
Failed:    0
------------
Total states run:     1
Total run time:   2.793 s

````
  
Next I did the same things again and got this result:  
	
````
debian:
----------
          ID: apache2
    Function: pkg.removed
      Result: True
     Comment: All specified packages are already absent #Already removed everything
     Started: 17:06:52.248183
    Duration: 44.771 ms
     Changes:   

Summary for debian
------------
Succeeded: 1 #Execution was a success, but no changes were made
Failed:    0
------------
Total states run:     1 
Total run time:  44.771 ms
````  
  
So, idempotency was achieved as the prints suggest.  
  
##e) Omat mausteet. Kokeile jotain uutta (ei aiemmin kurssilla näytettyä) ominaisuutta kustakin tärkeimmästä tilafunktiosta pkg, file, service, user.  / Try something new with state functions
  
First I had to refer to the manual for all the commands:  
	sudo salt-call --local sys.state_doc nameofcommandhere
  
**Pkg**
  
I tried out purging for pkg:  
	sudo salt 'debian' state.single pkg.purged apache2  
  
````
debian:
----------
          ID: apache2
    Function: pkg.purged
      Result: True
     Comment: All specified packages are already absent
     Started: 17:23:36.257690
    Duration: 45.574 ms
     Changes:   

Summary for debian
------------
Succeeded: 1
Failed:    0
------------
Total states run:     1
Total run time:  45.574 ms
````
  
The difference between purging and removing (according to my knowledge) is that purging removes conf-files too.  
  
**File**  
  
Next I wanted to try out appending to a file, so I created a file:  
	echo "The first sentence." |tee tmp/test  
	  
Appending didn't quite work out as expected:  
	sudo salt '\#*' file.append /tmp/test \ "The second sentence."  

````
debian:
    The minion function caused an exception: Traceback (most recent call last):
      File "/usr/lib/python3/dist-packages/salt/minion.py", line 1889, in _thread_return
        return_data = minion_instance._execute_job_function(
      File "/usr/lib/python3/dist-packages/salt/minion.py", line 1846, in _execute_job_function
        return_data = self.executors[fname](opts, data, func, args, kwargs)
      File "/usr/lib/python3/dist-packages/salt/executors/direct_call.py", line 12, in execute
        return func(*args, **kwargs)
      File "/usr/lib/python3/dist-packages/salt/modules/file.py", line 3389, in append
        with salt.utils.files.fopen(path, "rb+") as ofile:
      File "/usr/lib/python3/dist-packages/salt/utils/files.py", line 396, in fopen
        f_handle = open(*args, **kwargs)  # pylint: disable=resource-leakage
    FileNotFoundError: [Errno 2] No such file or directory: '/tmp/test'
ERROR: Minions returned with non-zero exit code
````
  
This was my error message. The funny thing is that the example from the [documents page](https://docs.saltproject.io/en/latest/ref/modules/all/salt.modules.file.html) worked like a charm:  
	sudo salt '*' file.append /tmp/testi2         "With all thine offerings thou shalt offer salt."         "Salt is what makes things taste bad when it isn't in them."  
	
![Pic 9. file.append working](pics/h1/9.png)  
*The example worked as it was supposed to.*  
	
So I did the logical step and tried to spot the diffences in my work and the example. The first one was that my file already existed, so I tried that one by removing the test-files:  
	
![Pic 10. file.append working](pics/h1/10.png)  
*I think that user rights might have been my error*  
  
I tried the example again and it was capable of making new files:  
````
sudo salt '*' file.append /etc/motd         "With all thine offerings thou shalt offer salt."         "Salt is what makes things taste bad when it isn't in them."

debian:
    Wrote 2 lines to "/etc/motd"

kallet@debian:~$ sudo salt '*' file.remove /etc/motd

debian:
    True

````  
  
My version of the simple command didn't manage to create a file while appending:  
````
sudo salt 'debian' state.single file.append /tmp/test \ "Testing"

debian:
----------
          ID: /tmp/test
    Function: file.append
      Result: None
     Comment: File /tmp/test is set to be created
     Started: 18:05:04.193453
    Duration: 0.589 ms
     Changes:   
              ----------
              new:
                  /tmp/test

Summary for debian
------------
Succeeded: 1 (unchanged=1, changed=1)
Failed:    0
------------
Total states run:     1
Total run time:   0.589 ms

````  
  
I tried to iterate trought the imaginary file:  
	sudo salt 'debian' state.single cmd.run 'cat /tmp/test'  
  
![Pic 11. PEBCAK?](pics/h1/11.png)  
*No luck*  
  
Next I tried to make a file and check for access:  
	echo "This is a test" |tee /tmp/test.txt  
	sudo salt 'debian' file.access /tmp/test.txt f  
	
![Pic 12. PEBCAK?](pics/h1/12.png)  
*Salt had access*  
  
So, a time for a try at appending with a file that has certified content and access:  
````
kallet@debian:~$ sudo salt 'debian' file.append '/tmp/test.txt' \ "This is an appendix" 
debian:
    The minion function caused an exception: Traceback (most recent call last):
      File "/usr/lib/python3/dist-packages/salt/minion.py", line 1889, in _thread_return
        return_data = minion_instance._execute_job_function(
      File "/usr/lib/python3/dist-packages/salt/minion.py", line 1846, in _execute_job_function
        return_data = self.executors[fname](opts, data, func, args, kwargs)
      File "/usr/lib/python3/dist-packages/salt/executors/direct_call.py", line 12, in execute
        return func(*args, **kwargs)
      File "/usr/lib/python3/dist-packages/salt/modules/file.py", line 3405, in append
        with salt.utils.files.fopen(path, "a") as ofile:
      File "/usr/lib/python3/dist-packages/salt/utils/files.py", line 396, in fopen
        f_handle = open(*args, **kwargs)  # pylint: disable=resource-leakage
    PermissionError: [Errno 13] Permission denied: '/tmp/test.txt'
ERROR: Minions returned with non-zero exit code
````
  
Computer said no, still. [A source](https://itsmycode.com/python-permissionerror-errno-13-permission-denied/) states that it's a problem with user rights. I can't comprahend why it's ok to save or modify something in the etc-folder, but not to home - while working as superuser.  
  
I decided to try one last time and create the file with salt first and then edit it with salt:  
	rm /tmp/test.txt
	sudo salt '\#*' state.single file.managed /tmp/test.txt contents="This might work"  
	
![Pic 13. Created a file](pics/h1/13.png)  
*I Created a file with salt*  
  
Stopped working @ 18.38.  
  
Started to work @ 21.00, determined to finish this portion.  
  
This time appending worked like a charm:  
	sudo salt 'debian' file.append '/tmp/test.txt' \ "This is an appendix"  

![Pic 14. Created a file](pics/h1/14.png)  
*Appending to a file made with salt worked ok*  
  
**Service**  
  
First I made sure that my slave had Apache2 installed:  
	sudo salt 'debian' state.single pkg.installed apache2  
  
Then I wanted to see, if I could make sure that the minion had userdir enabled in Apache:  
	sudo salt '*' apache.a2enmod userdir  
  
````
debian:
    ----------
    Mod:
        userdir
    Name:
        Apache2 Enable Mod
    Status:
        Mod userdir enabled
````

The service was enabled succesfully.  
  
**user**  
The source I used:
[https://salt-zh.readthedocs.io/en/latest/ref/states/all/salt.states.user.html](https://salt-zh.readthedocs.io/en/latest/ref/states/all/salt.states.user.html)  
  
One general thing about Linux manuals and documentation online seems to be that actual commands are hard to come by and you can quite easily get lost in guessing what the correct syntax might be. A simple example of cli-use would make everything 1000% more inviting to engage in.  
  
I wanted to spesify a user with a real name and an e-mail (with a guess of the correct syntax:  
	sudo salt '*' salt.states.user.present(name="Mikko Makkonen")  
	
	bash: syntax error near unexpected token `('  
  
That produced a syntax error, so back to guesswork:  
	sudo salt '*' salt.states.user.present(Mikko Makkonen)  
	  
Same error, so let's try quotes:  
	sudo salt '*' salt.states.user.present("Mikko Makkonen")
  
No change in the error message, so I took an another guess:  
	sudo salt '*' salt.states.user.present(name "Mikko Makkonen")  
	sudo salt '*' salt.states.user.present(name: "Mikko Makkonen")  
	
I had the same error still, so it was time to [Google](https://docs.saltproject.io/en/latest/ref/modules/all/salt.modules.useradd.html):  
	sudo salt '*' user.add Mikko Makkonen  
	
Now the error changed, and I had made some increamental progress. I think that there a 2 types of commands for Salt - those meant for CLI and others that are oriented towards a conf-file.  
  
![Pic 15. Getting there](pics/h1/15.png)  
*Salt actually did something this time!*  
  
I tried adding some quotes around the users name, but that didn't help. A thought popped to my mind - maybe I was trying to add a username "Mikko Makkonen", not a user named Mikko Makkonen. Sure enough, just dropping the space made all the difference:  
	sudo salt '#*' user.add Mikko  
  
![Pic 16. Mikko joins the club](pics/h1/16.png)  
*Salt did exactly what I commanded it to do*  
  
I deleted the user:  
	sudo salt '*' user.delete Mikko  
  
And this time around I tried all adding 3 parameters at once:  
	sudo salt '*' user.add mikkoma fullname='Mikko Makkonen' other='mikko@makkonen.fi'  
	
![Pic 17. Mikko joins the club, for real](pics/h1/17.png)  
*A great success!*  
  
Now I just wanted to see Mikko's info:  
	sudo salt '*' user.info mikkoma  
  
![Pic 18. Info](pics/h1/18.png)  
*User info*  
  
I quit for the night @ 21.55.  
  
##f) Herra ja orja. Asenna Salt master-slave arkkitehtuurilla. Anna orjalle komento. (Tämä tehtävä lienee hieman haastavampi) Update 2022-03-31: Voit asentaa tässä molemmat, herran ja orjan, samalle koneelle.  / Install a master-slave arrangement
  
This has already been done above.
  
##i) Vapaaehtoinen: kokeile herra-orja -arkkitehtuuria verkon yli, niin että herra ja orja ovat eri koneilla. Voit laittaa ne myös eri virtuaalikoneille. (Updated: päivitin tätä alakohtaa 2022-03-31) / Try out a master-slave arrangement over a network