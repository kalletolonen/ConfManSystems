# **h2 package-file-service**

I started @ 14.05.
  
The source for the exercise [h2](https://terokarvinen.com/2021/configuration-management-systems-2022-spring/#h2-package-file-service)
  
**Hardware & Software**  
*Win 11 + VirtualBox 6.0 + Debian 11 Bullseye*  
  
*Hardware:*  
*CPU: AMD Ryzen 9 5900HS*  
*Mem: 16 Gt LPDDR4X*  
*Storage: 512 Gt M.2 2230 NVMe PCIe 3.0 SSD*  
  
##  z) Lue ja tiivistä / Reading exercise ##

**[SaltStack Configuration Management: Get Started Tutorial - Introduction](https://docs.saltproject.io/en/getstarted/config/index.html)**  
  
Just a bullet point list of things you'll be using:  
-Salt state function calls  
-includes  
-requisites  
-Jinja  

It also explains that Salt let's you define a desired state (idempotency) regarding applications, files and settings, ie. everything.  
  
**[SaltStack Configuration Management: Get Started Tutorial - Functions](https://docs.saltproject.io/en/getstarted/config/functions.html)**  
  
-Functions are the secret sauce that makes Salt do it's magic  
-They can be used to: "install and configure applications, create users, distribute files, and about anything else you might need to do when setting up your systems."  
-Salt states are written in [YAML](https://yaml.org/) (YAML Ain't Markeup Language)  
-The basic idea is that it's like JSON, but without so many special characters (those are replaced with spaces)  
  
![Pic 1. YAML](pics/h2/1.png)  
*Screencap from the source, YAML syntax example*  
  
-Program blocks are marked with 2 spaces  
-After the hyphen, there is also 1 space  
  
Karvinen also stated in our previous session that the ID will be used as a name, if no name is given in the function. As an example, an ID of apache, would be named apache, if no other name is given. The article gives contrary advise and urges you to name your functions with a descriptive name.  
  
![Pic 2. Function example](pics/h2/2.png)  
*Screencap from an example function from the source*  
  
The example picture is of a function that first makes sure a package is installed and then checks that the installed service is running.  
  
-You should note that Salt execution functions (unlike state-functions) don't check if the service is already running before doing their job. For example service.running is a state function and it checks before issuing a restart and service.restart is an execution function and just restarts the service.  
   
You can do a dry run in production systems with a test-parameter. Just by adding "test=True" to the end of your command.  
  
state.apply looks for a init.sls-file that contains your functions to apply in the directory that you specify.  
	
	sudo salt '*' state.apply apache test=True
	#this command would look for /srv/salt/apache/init.sls and do it's bidding to all minions in a test mode.  
  
**[SaltStack Configuration Management: Get Started Tutorial - Files](https://docs.saltproject.io/en/getstarted/config/files.html)**  
  
-Salt has a built-in server for files  
-files places in src/salt are available for salt minions (the path is salt://(path in srv/salt)  
You could, for example, manage Apache conf-files as such (direct quote):  
  
````
deploy the http.conf file:
  file.managed:
    - name: /etc/http/conf/http.conf
    - source: salt://apache/http.conf
````
  
The absolute path in Salt master would be: /srv/salt/apache/http.conf  
  
Managing conf-files in this manner has a great advantage:  
**Every minion that this is applied to, has the same settings**
  
## a) Oletussivu. Vaihda Apachen oletussivu päällekirjoittamalla /var/ww/html/index.html . Voit käyttää pohjana tunnilla tekemääsi Apache-asennusta. / Change the default page for apache  
  
## b) Tri Kaaaos. Aiheuta erilaisia vikatilanteita ja osoita, kuinka Apache-tilasi korjaa ne. Voit esimerksi sulkea demonin (sudo systemctl stop foobar), poistaa asetukset tai poistaa apachen paketit. Osoita yksinkertaisin testein, saat palvelun toimimattomaksi, ja salt-tilasi saa sen jälleen toimimaan. / Cause some errors and show how your apache-state fixes those  
  
## c) Shh! Asenna ja konfiguroi SSH-demoni. Laita se porttiin 7373. / Install SSH to port 7373  
  

